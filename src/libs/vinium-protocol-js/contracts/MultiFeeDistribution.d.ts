/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface MultiFeeDistributionInterface extends ethers.utils.Interface {
  functions: {
    'addReward(address)': FunctionFragment;
    'claimableRewards(address)': FunctionFragment;
    'delegateExit(address)': FunctionFragment;
    'earnedBalances(address)': FunctionFragment;
    'exitDelegatee(address)': FunctionFragment;
    'exitEarly(address)': FunctionFragment;
    'getMinters()': FunctionFragment;
    'getReward(address[])': FunctionFragment;
    'incentivesController()': FunctionFragment;
    'initialize(address,address)': FunctionFragment;
    'lastTimeRewardApplicable(address)': FunctionFragment;
    'lock(uint256,address)': FunctionFragment;
    'lockDuration()': FunctionFragment;
    'lockedBalances(address)': FunctionFragment;
    'lockedSupply()': FunctionFragment;
    'mint(address,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'publicExit()': FunctionFragment;
    'publicExitAreSet()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardData(address)': FunctionFragment;
    'rewardLookback()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'rewardTokens(uint256)': FunctionFragment;
    'rewards(address,address)': FunctionFragment;
    'rewardsDuration()': FunctionFragment;
    'setIncentivesController(address)': FunctionFragment;
    'setMinters(address[])': FunctionFragment;
    'setTeamRewardFee(uint256)': FunctionFragment;
    'setTeamRewardVault(address)': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'stakingToken()': FunctionFragment;
    'teamRewardFee()': FunctionFragment;
    'teamRewardVault()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasury()': FunctionFragment;
    'unpause()': FunctionFragment;
    'userRewardPerTokenPaid(address,address)': FunctionFragment;
    'vestingDuration()': FunctionFragment;
    'withdraw()': FunctionFragment;
    'withdrawExpiredLocks()': FunctionFragment;
    'withdrawableBalance(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addReward', values: [string]): string;
  encodeFunctionData(functionFragment: 'claimableRewards', values: [string]): string;
  encodeFunctionData(functionFragment: 'delegateExit', values: [string]): string;
  encodeFunctionData(functionFragment: 'earnedBalances', values: [string]): string;
  encodeFunctionData(functionFragment: 'exitDelegatee', values: [string]): string;
  encodeFunctionData(functionFragment: 'exitEarly', values: [string]): string;
  encodeFunctionData(functionFragment: 'getMinters', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getReward', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'incentivesController', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'lastTimeRewardApplicable', values: [string]): string;
  encodeFunctionData(functionFragment: 'lock', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'lockDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockedBalances', values: [string]): string;
  encodeFunctionData(functionFragment: 'lockedSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mint', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'publicExit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'publicExitAreSet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardData', values: [string]): string;
  encodeFunctionData(functionFragment: 'rewardLookback', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'rewards', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'rewardsDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setIncentivesController', values: [string]): string;
  encodeFunctionData(functionFragment: 'setMinters', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'setTeamRewardFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setTeamRewardVault', values: [string]): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [string]): string;
  encodeFunctionData(functionFragment: 'stakingToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'teamRewardFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'teamRewardVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userRewardPerTokenPaid', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'vestingDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawExpiredLocks', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawableBalance', values: [string]): string;

  decodeFunctionResult(functionFragment: 'addReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimableRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegateExit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earnedBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exitDelegatee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exitEarly', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'incentivesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastTimeRewardApplicable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'publicExit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'publicExitAreSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardLookback', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIncentivesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTeamRewardFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTeamRewardVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'teamRewardFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'teamRewardVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRewardPerTokenPaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestingDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawExpiredLocks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawableBalance', data: BytesLike): Result;

  events: {
    'ExitedEarly(address,uint256,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'Locked(address,uint256)': EventFragment;
    'Minted(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'PublicExit()': EventFragment;
    'RewardPaid(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdrawn(address,uint256)': EventFragment;
    'WithdrawnExpiredLocks(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ExitedEarly'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Locked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Minted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PublicExit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawnExpiredLocks'): EventFragment;
}

export class MultiFeeDistribution extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MultiFeeDistributionInterface;

  functions: {
    addReward(_rewardsToken: string, overrides?: Overrides): Promise<ContractTransaction>;

    'addReward(address)'(_rewardsToken: string, overrides?: Overrides): Promise<ContractTransaction>;

    claimableRewards(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    }>;

    'claimableRewards(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    }>;

    delegateExit(delegatee: string, overrides?: Overrides): Promise<ContractTransaction>;

    'delegateExit(address)'(delegatee: string, overrides?: Overrides): Promise<ContractTransaction>;

    earnedBalances(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      earningsData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    'earnedBalances(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      earningsData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    exitDelegatee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'exitDelegatee(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    exitEarly(onBehalfOf: string, overrides?: Overrides): Promise<ContractTransaction>;

    'exitEarly(address)'(onBehalfOf: string, overrides?: Overrides): Promise<ContractTransaction>;

    getMinters(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    'getMinters()'(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    getReward(_rewardTokens: string[], overrides?: Overrides): Promise<ContractTransaction>;

    'getReward(address[])'(_rewardTokens: string[], overrides?: Overrides): Promise<ContractTransaction>;

    incentivesController(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'incentivesController()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    initialize(_stakingToken: string, _rewardToken: string, overrides?: Overrides): Promise<ContractTransaction>;

    'initialize(address,address)'(_stakingToken: string, _rewardToken: string, overrides?: Overrides): Promise<ContractTransaction>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'lastTimeRewardApplicable(address)'(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lock(amount: BigNumberish, onBehalfOf: string, overrides?: Overrides): Promise<ContractTransaction>;

    'lock(uint256,address)'(amount: BigNumberish, onBehalfOf: string, overrides?: Overrides): Promise<ContractTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'lockDuration()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lockedBalances(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    'lockedBalances(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    lockedSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'lockedSupply()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    mint(user: string, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    'mint(address,uint256)'(user: string, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'owner()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    'pause()'(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    'paused()'(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    publicExit(overrides?: Overrides): Promise<ContractTransaction>;

    'publicExit()'(overrides?: Overrides): Promise<ContractTransaction>;

    publicExitAreSet(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    'publicExitAreSet()'(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
      balance: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    'rewardData(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
      balance: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    rewardLookback(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'rewardLookback()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    rewardToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'rewardToken()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'rewardTokens(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'rewards(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rewardsDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'rewardsDuration()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setIncentivesController(_controller: string, overrides?: Overrides): Promise<ContractTransaction>;

    'setIncentivesController(address)'(_controller: string, overrides?: Overrides): Promise<ContractTransaction>;

    setMinters(_minters: string[], overrides?: Overrides): Promise<ContractTransaction>;

    'setMinters(address[])'(_minters: string[], overrides?: Overrides): Promise<ContractTransaction>;

    setTeamRewardFee(fee: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    'setTeamRewardFee(uint256)'(fee: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    setTeamRewardVault(vault: string, overrides?: Overrides): Promise<ContractTransaction>;

    'setTeamRewardVault(address)'(vault: string, overrides?: Overrides): Promise<ContractTransaction>;

    setTreasury(_treasury: string, overrides?: Overrides): Promise<ContractTransaction>;

    'setTreasury(address)'(_treasury: string, overrides?: Overrides): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'stakingToken()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    teamRewardFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'teamRewardFee()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    teamRewardVault(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'teamRewardVault()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'treasury()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    'unpause()'(overrides?: Overrides): Promise<ContractTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'userRewardPerTokenPaid(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    vestingDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'vestingDuration()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    'withdraw()'(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawExpiredLocks(overrides?: Overrides): Promise<ContractTransaction>;

    'withdrawExpiredLocks()'(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawableBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      penaltyAmount: BigNumber;
      treausryAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    'withdrawableBalance(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      penaltyAmount: BigNumber;
      treausryAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;
  };

  addReward(_rewardsToken: string, overrides?: Overrides): Promise<ContractTransaction>;

  'addReward(address)'(_rewardsToken: string, overrides?: Overrides): Promise<ContractTransaction>;

  claimableRewards(account: string, overrides?: CallOverrides): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

  'claimableRewards(address)'(account: string, overrides?: CallOverrides): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

  delegateExit(delegatee: string, overrides?: Overrides): Promise<ContractTransaction>;

  'delegateExit(address)'(delegatee: string, overrides?: Overrides): Promise<ContractTransaction>;

  earnedBalances(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    earningsData: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
    0: BigNumber;
    1: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
  }>;

  'earnedBalances(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    earningsData: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
    0: BigNumber;
    1: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
  }>;

  exitDelegatee(arg0: string, overrides?: CallOverrides): Promise<string>;

  'exitDelegatee(address)'(arg0: string, overrides?: CallOverrides): Promise<string>;

  exitEarly(onBehalfOf: string, overrides?: Overrides): Promise<ContractTransaction>;

  'exitEarly(address)'(onBehalfOf: string, overrides?: Overrides): Promise<ContractTransaction>;

  getMinters(overrides?: CallOverrides): Promise<string[]>;

  'getMinters()'(overrides?: CallOverrides): Promise<string[]>;

  getReward(_rewardTokens: string[], overrides?: Overrides): Promise<ContractTransaction>;

  'getReward(address[])'(_rewardTokens: string[], overrides?: Overrides): Promise<ContractTransaction>;

  incentivesController(overrides?: CallOverrides): Promise<string>;

  'incentivesController()'(overrides?: CallOverrides): Promise<string>;

  initialize(_stakingToken: string, _rewardToken: string, overrides?: Overrides): Promise<ContractTransaction>;

  'initialize(address,address)'(_stakingToken: string, _rewardToken: string, overrides?: Overrides): Promise<ContractTransaction>;

  lastTimeRewardApplicable(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  'lastTimeRewardApplicable(address)'(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  lock(amount: BigNumberish, onBehalfOf: string, overrides?: Overrides): Promise<ContractTransaction>;

  'lock(uint256,address)'(amount: BigNumberish, onBehalfOf: string, overrides?: Overrides): Promise<ContractTransaction>;

  lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  'lockDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

  lockedBalances(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    unlockable: BigNumber;
    locked: BigNumber;
    lockData: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
  }>;

  'lockedBalances(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    unlockable: BigNumber;
    locked: BigNumber;
    lockData: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: {
      amount: BigNumber;
      unlockTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
  }>;

  lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  'lockedSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  mint(user: string, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  'mint(address,uint256)'(user: string, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  'pause()'(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  'paused()'(overrides?: CallOverrides): Promise<boolean>;

  publicExit(overrides?: Overrides): Promise<ContractTransaction>;

  'publicExit()'(overrides?: Overrides): Promise<ContractTransaction>;

  publicExitAreSet(overrides?: CallOverrides): Promise<boolean>;

  'publicExitAreSet()'(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>;

  rewardData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    periodFinish: BigNumber;
    rewardRate: BigNumber;
    lastUpdateTime: BigNumber;
    rewardPerTokenStored: BigNumber;
    balance: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  'rewardData(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    periodFinish: BigNumber;
    rewardRate: BigNumber;
    lastUpdateTime: BigNumber;
    rewardPerTokenStored: BigNumber;
    balance: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  rewardLookback(overrides?: CallOverrides): Promise<BigNumber>;

  'rewardLookback()'(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  'rewardToken()'(overrides?: CallOverrides): Promise<string>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'rewardTokens(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  'rewards(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  'rewardsDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

  setIncentivesController(_controller: string, overrides?: Overrides): Promise<ContractTransaction>;

  'setIncentivesController(address)'(_controller: string, overrides?: Overrides): Promise<ContractTransaction>;

  setMinters(_minters: string[], overrides?: Overrides): Promise<ContractTransaction>;

  'setMinters(address[])'(_minters: string[], overrides?: Overrides): Promise<ContractTransaction>;

  setTeamRewardFee(fee: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  'setTeamRewardFee(uint256)'(fee: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  setTeamRewardVault(vault: string, overrides?: Overrides): Promise<ContractTransaction>;

  'setTeamRewardVault(address)'(vault: string, overrides?: Overrides): Promise<ContractTransaction>;

  setTreasury(_treasury: string, overrides?: Overrides): Promise<ContractTransaction>;

  'setTreasury(address)'(_treasury: string, overrides?: Overrides): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  'stakingToken()'(overrides?: CallOverrides): Promise<string>;

  teamRewardFee(overrides?: CallOverrides): Promise<BigNumber>;

  'teamRewardFee()'(overrides?: CallOverrides): Promise<BigNumber>;

  teamRewardVault(overrides?: CallOverrides): Promise<string>;

  'teamRewardVault()'(overrides?: CallOverrides): Promise<string>;

  transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

  'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  'treasury()'(overrides?: CallOverrides): Promise<string>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  'unpause()'(overrides?: Overrides): Promise<ContractTransaction>;

  userRewardPerTokenPaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  'userRewardPerTokenPaid(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  vestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  'vestingDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  'withdraw()'(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawExpiredLocks(overrides?: Overrides): Promise<ContractTransaction>;

  'withdrawExpiredLocks()'(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawableBalance(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    penaltyAmount: BigNumber;
    treausryAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  'withdrawableBalance(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    penaltyAmount: BigNumber;
    treausryAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  callStatic: {
    addReward(_rewardsToken: string, overrides?: CallOverrides): Promise<void>;

    'addReward(address)'(_rewardsToken: string, overrides?: CallOverrides): Promise<void>;

    claimableRewards(account: string, overrides?: CallOverrides): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

    'claimableRewards(address)'(account: string, overrides?: CallOverrides): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

    delegateExit(delegatee: string, overrides?: CallOverrides): Promise<void>;

    'delegateExit(address)'(delegatee: string, overrides?: CallOverrides): Promise<void>;

    earnedBalances(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      earningsData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    'earnedBalances(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      earningsData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    exitDelegatee(arg0: string, overrides?: CallOverrides): Promise<string>;

    'exitDelegatee(address)'(arg0: string, overrides?: CallOverrides): Promise<string>;

    exitEarly(onBehalfOf: string, overrides?: CallOverrides): Promise<void>;

    'exitEarly(address)'(onBehalfOf: string, overrides?: CallOverrides): Promise<void>;

    getMinters(overrides?: CallOverrides): Promise<string[]>;

    'getMinters()'(overrides?: CallOverrides): Promise<string[]>;

    getReward(_rewardTokens: string[], overrides?: CallOverrides): Promise<void>;

    'getReward(address[])'(_rewardTokens: string[], overrides?: CallOverrides): Promise<void>;

    incentivesController(overrides?: CallOverrides): Promise<string>;

    'incentivesController()'(overrides?: CallOverrides): Promise<string>;

    initialize(_stakingToken: string, _rewardToken: string, overrides?: CallOverrides): Promise<void>;

    'initialize(address,address)'(_stakingToken: string, _rewardToken: string, overrides?: CallOverrides): Promise<void>;

    lastTimeRewardApplicable(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'lastTimeRewardApplicable(address)'(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    lock(amount: BigNumberish, onBehalfOf: string, overrides?: CallOverrides): Promise<void>;

    'lock(uint256,address)'(amount: BigNumberish, onBehalfOf: string, overrides?: CallOverrides): Promise<void>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'lockDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalances(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    'lockedBalances(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: {
        amount: BigNumber;
        unlockTime: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
    }>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'lockedSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    mint(user: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'mint(address,uint256)'(user: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    'pause()'(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    'paused()'(overrides?: CallOverrides): Promise<boolean>;

    publicExit(overrides?: CallOverrides): Promise<void>;

    'publicExit()'(overrides?: CallOverrides): Promise<void>;

    publicExitAreSet(overrides?: CallOverrides): Promise<boolean>;

    'publicExitAreSet()'(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
      balance: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    'rewardData(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
      balance: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    rewardLookback(overrides?: CallOverrides): Promise<BigNumber>;

    'rewardLookback()'(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    'rewardToken()'(overrides?: CallOverrides): Promise<string>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'rewardTokens(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    'rewards(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'rewardsDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    setIncentivesController(_controller: string, overrides?: CallOverrides): Promise<void>;

    'setIncentivesController(address)'(_controller: string, overrides?: CallOverrides): Promise<void>;

    setMinters(_minters: string[], overrides?: CallOverrides): Promise<void>;

    'setMinters(address[])'(_minters: string[], overrides?: CallOverrides): Promise<void>;

    setTeamRewardFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'setTeamRewardFee(uint256)'(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTeamRewardVault(vault: string, overrides?: CallOverrides): Promise<void>;

    'setTeamRewardVault(address)'(vault: string, overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    'setTreasury(address)'(_treasury: string, overrides?: CallOverrides): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    'stakingToken()'(overrides?: CallOverrides): Promise<string>;

    teamRewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    'teamRewardFee()'(overrides?: CallOverrides): Promise<BigNumber>;

    teamRewardVault(overrides?: CallOverrides): Promise<string>;

    'teamRewardVault()'(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    'treasury()'(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    'unpause()'(overrides?: CallOverrides): Promise<void>;

    userRewardPerTokenPaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    'userRewardPerTokenPaid(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    vestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'vestingDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    'withdraw()'(overrides?: CallOverrides): Promise<void>;

    withdrawExpiredLocks(overrides?: CallOverrides): Promise<void>;

    'withdrawExpiredLocks()'(overrides?: CallOverrides): Promise<void>;

    withdrawableBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      penaltyAmount: BigNumber;
      treausryAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    'withdrawableBalance(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      penaltyAmount: BigNumber;
      treausryAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;
  };

  filters: {
    ExitedEarly(user: string | null, amount: null, penaltyAmount: null): EventFilter;

    Initialized(version: null): EventFilter;

    Locked(user: string | null, amount: null): EventFilter;

    Minted(user: string | null, amount: null): EventFilter;

    OwnershipTransferred(previousOwner: string | null, newOwner: string | null): EventFilter;

    Paused(account: null): EventFilter;

    PublicExit(): EventFilter;

    RewardPaid(user: string | null, rewardsToken: string | null, reward: null): EventFilter;

    Unpaused(account: null): EventFilter;

    Withdrawn(user: string | null, amount: null): EventFilter;

    WithdrawnExpiredLocks(user: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    addReward(_rewardsToken: string, overrides?: Overrides): Promise<BigNumber>;

    'addReward(address)'(_rewardsToken: string, overrides?: Overrides): Promise<BigNumber>;

    claimableRewards(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'claimableRewards(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegateExit(delegatee: string, overrides?: Overrides): Promise<BigNumber>;

    'delegateExit(address)'(delegatee: string, overrides?: Overrides): Promise<BigNumber>;

    earnedBalances(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'earnedBalances(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    exitDelegatee(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'exitDelegatee(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    exitEarly(onBehalfOf: string, overrides?: Overrides): Promise<BigNumber>;

    'exitEarly(address)'(onBehalfOf: string, overrides?: Overrides): Promise<BigNumber>;

    getMinters(overrides?: CallOverrides): Promise<BigNumber>;

    'getMinters()'(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(_rewardTokens: string[], overrides?: Overrides): Promise<BigNumber>;

    'getReward(address[])'(_rewardTokens: string[], overrides?: Overrides): Promise<BigNumber>;

    incentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    'incentivesController()'(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_stakingToken: string, _rewardToken: string, overrides?: Overrides): Promise<BigNumber>;

    'initialize(address,address)'(_stakingToken: string, _rewardToken: string, overrides?: Overrides): Promise<BigNumber>;

    lastTimeRewardApplicable(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'lastTimeRewardApplicable(address)'(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    lock(amount: BigNumberish, onBehalfOf: string, overrides?: Overrides): Promise<BigNumber>;

    'lock(uint256,address)'(amount: BigNumberish, onBehalfOf: string, overrides?: Overrides): Promise<BigNumber>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'lockDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalances(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'lockedBalances(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'lockedSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    mint(user: string, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'mint(address,uint256)'(user: string, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    'pause()'(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>;

    publicExit(overrides?: Overrides): Promise<BigNumber>;

    'publicExit()'(overrides?: Overrides): Promise<BigNumber>;

    publicExitAreSet(overrides?: CallOverrides): Promise<BigNumber>;

    'publicExitAreSet()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>;

    rewardData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'rewardData(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardLookback(overrides?: CallOverrides): Promise<BigNumber>;

    'rewardLookback()'(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    'rewardToken()'(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'rewardTokens(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    'rewards(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'rewardsDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    setIncentivesController(_controller: string, overrides?: Overrides): Promise<BigNumber>;

    'setIncentivesController(address)'(_controller: string, overrides?: Overrides): Promise<BigNumber>;

    setMinters(_minters: string[], overrides?: Overrides): Promise<BigNumber>;

    'setMinters(address[])'(_minters: string[], overrides?: Overrides): Promise<BigNumber>;

    setTeamRewardFee(fee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'setTeamRewardFee(uint256)'(fee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    setTeamRewardVault(vault: string, overrides?: Overrides): Promise<BigNumber>;

    'setTeamRewardVault(address)'(vault: string, overrides?: Overrides): Promise<BigNumber>;

    setTreasury(_treasury: string, overrides?: Overrides): Promise<BigNumber>;

    'setTreasury(address)'(_treasury: string, overrides?: Overrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    'stakingToken()'(overrides?: CallOverrides): Promise<BigNumber>;

    teamRewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    'teamRewardFee()'(overrides?: CallOverrides): Promise<BigNumber>;

    teamRewardVault(overrides?: CallOverrides): Promise<BigNumber>;

    'teamRewardVault()'(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    'treasury()'(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    'unpause()'(overrides?: Overrides): Promise<BigNumber>;

    userRewardPerTokenPaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    'userRewardPerTokenPaid(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    vestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'vestingDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    'withdraw()'(overrides?: Overrides): Promise<BigNumber>;

    withdrawExpiredLocks(overrides?: Overrides): Promise<BigNumber>;

    'withdrawExpiredLocks()'(overrides?: Overrides): Promise<BigNumber>;

    withdrawableBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'withdrawableBalance(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addReward(_rewardsToken: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'addReward(address)'(_rewardsToken: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    claimableRewards(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'claimableRewards(address)'(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateExit(delegatee: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'delegateExit(address)'(delegatee: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    earnedBalances(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'earnedBalances(address)'(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exitDelegatee(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'exitDelegatee(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exitEarly(onBehalfOf: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'exitEarly(address)'(onBehalfOf: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    getMinters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getMinters()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(_rewardTokens: string[], overrides?: Overrides): Promise<PopulatedTransaction>;

    'getReward(address[])'(_rewardTokens: string[], overrides?: Overrides): Promise<PopulatedTransaction>;

    incentivesController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'incentivesController()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(_stakingToken: string, _rewardToken: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'initialize(address,address)'(_stakingToken: string, _rewardToken: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(_rewardsToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastTimeRewardApplicable(address)'(_rewardsToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(amount: BigNumberish, onBehalfOf: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'lock(uint256,address)'(amount: BigNumberish, onBehalfOf: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lockDuration()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedBalances(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lockedBalances(address)'(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lockedSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(user: string, amount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    'mint(address,uint256)'(user: string, amount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    'pause()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicExit(overrides?: Overrides): Promise<PopulatedTransaction>;

    'publicExit()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    publicExitAreSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'publicExitAreSet()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardData(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewardData(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardLookback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewardLookback()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewardToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewardTokens(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewards(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewardsDuration()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setIncentivesController(_controller: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'setIncentivesController(address)'(_controller: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    setMinters(_minters: string[], overrides?: Overrides): Promise<PopulatedTransaction>;

    'setMinters(address[])'(_minters: string[], overrides?: Overrides): Promise<PopulatedTransaction>;

    setTeamRewardFee(fee: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    'setTeamRewardFee(uint256)'(fee: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    setTeamRewardVault(vault: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'setTeamRewardVault(address)'(vault: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    setTreasury(_treasury: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'setTreasury(address)'(_treasury: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'stakingToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamRewardFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'teamRewardFee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamRewardVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'teamRewardVault()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'treasury()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    'unpause()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'userRewardPerTokenPaid(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'vestingDuration()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    'withdraw()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawExpiredLocks(overrides?: Overrides): Promise<PopulatedTransaction>;

    'withdrawExpiredLocks()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawableBalance(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'withdrawableBalance(address)'(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
